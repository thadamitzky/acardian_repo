/*
  Copyright 2014 Dell Inc.
  ALL RIGHTS RESERVED.

  This software is the confidential and proprietary information of
  Dell Inc. ("Confidential Information").  You shall not
  disclose such Confidential Information and shall use it only in
  accordance with the terms of the license agreement you entered
  into with Dell Inc.

  DELL INC. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT
  THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
  NON-INFRINGEMENT. DELL SHALL NOT BE LIABLE FOR ANY
  DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
  OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */  

package de.com.aca.hada.agent;

import java.util.List;

import de.com.aca.hada.agent.samples.hadaLocationData;
import de.com.aca.hada.agent.samples.hadaMeasureData;
import de.com.aca.hada.agent.samples.hadaScenarioData;
import de.com.aca.hada.agent.samples.SogetiAgentProtData;
import de.com.aca.hada.agent.samples.hadaStepData;
import de.com.aca.sogeti.controller.DataController;
import de.com.aca.sogeti.module.LocationMapping;
import de.com.aca.sogeti.module.MeasureMapping;
import de.com.aca.sogeti.module.StepMapping;

import com.quest.glue.api.services.*;

/**
 * The core implementation class of the hadaSogetiAgent agent.
 */ 
public class hadaSogetiAgentImpl implements com.quest.glue.api.agent.Agent,                                                                             
                                              hadaSogetiAgentCollectors,
 
                                              ASPPropertyListener
{

	private final LogService.Logger mLogger;
	private final RegistrationService mRegistrationService;
	private final hadaSogetiAgentSupportBundle mBundle;

	private final hadaSogetiAgentDataProvider mDataProvider;

	private final TopologyDataSubmissionService3.TopologySubmitter3 mSubmitter;
	private final UnitService mUnitsService;
	private final hadaSogetiAgentPropertyWrapper mProperties;

	private final LocationMapping locations;
	private final MeasureMapping measures;
	private final StepMapping steps;

/**
 * Called by FglAM to create a new instance of this agent. This constructor is required
 * by FglAM and must be present.
 *
 * @param serviceFactory Factory used to create services for this agent
 */
public hadaSogetiAgentImpl(ServiceFactory serviceFactory) throws ServiceFactory.ServiceNotAvailableException {
    this(serviceFactory, new hadaSogetiAgentDataProviderImpl(serviceFactory)); 
}

/**
 * Creates a new instance of this agent using to provided class to collect all
 * necessary data for submission. This allows the data provided to be swapped out or
 * mocked up during unit tests.
 * <p/>
 * This is an example of one possible way to structure the agent, but it is not the only
 * way. You are free to change or remove this constructor as you see fit.  
 *
 * @param serviceFactory Factory used to create services for this agent
 * @param dataProvider The class to use to obtain all data for submission.
 */
/*pkg*/ hadaSogetiAgentImpl(ServiceFactory serviceFactory, hadaSogetiAgentDataProvider dataProvider) 
                                                throws ServiceFactory.ServiceNotAvailableException {
    LogService logService = serviceFactory.getService(LogService.class);
    mLogger = logService.getLogger(hadaSogetiAgentImpl.class);          

    mDataProvider = dataProvider;

    mRegistrationService = serviceFactory.getService(RegistrationService.class);
    // This will automatically register all the service-related listeners
    // implemented by this class.
    mRegistrationService.registerAllListeners(this);

    // This hooks the SogetiAgentProt up to the support bundle framework and
    // and allows it to contribute information to the support bundle.
    mBundle = new hadaSogetiAgentSupportBundle(this);
    mRegistrationService.registerAllListeners(mBundle);
    
    final TopologyDataSubmissionService3 subService = serviceFactory
			.getService(TopologyDataSubmissionService3.class);
    mSubmitter = subService.getTopologySubmitter();
    mUnitsService = serviceFactory.getService(UnitService.class);
	// SogetiAgentProtPropertyWrapper is automatically generated by the
	// tooling based
	// on the sample type definitions in the agent-definition.xml file.
    ASPService3 aspService = serviceFactory.getService(ASPService3.class);
    mProperties = new hadaSogetiAgentPropertyWrapper(aspService);
    // Log some basic info to indicate that the agent has been created

    locations = new LocationMapping(null);
    measures = new MeasureMapping(null);
    steps = new StepMapping(null);

    // Log some basic info to indicate that the agent has been created
    mLogger.log("agentVersion", "hadaSogetiAgent", "1.0.0");
}

/**
 * Called by FglAM at the end of the agent's life
 */
@Override
public void destroy() {
    mRegistrationService.unregisterAllListeners(this);
    mRegistrationService.unregisterAllListeners(mBundle);
}

/**
 * Called by FglAM to begin data collection.
 * <p/>
 * Since there are data collector(s) defined for this agent, taking action as a result
 * of this method call is optional. Each data collector method will be called by FglAM
 * when it is scheduled.
 
 */
@Override
public void startDataCollection() {
    mLogger.debug("Data collection started");
}

/**
 * Called by FglAM when data collection should be stopped.
 * <p/>
 * Since there are data collector(s) defined for this agent, taking action as a result
 * of this method call is optional.
 */
@Override
public void stopDataCollection() {
    mLogger.debug("Stopping data collection");
}

/**
 * Respond to property changes.
 * <p/>
 * This method is part of the ASPPropertyListener interface and is not required
 * by agents that do not implement it.
 * <p/>
 * Agents can receive property changes while they are running, and it is up to
 * the agent developer to ensure that modifications do not break the agent.
 */
public void propertiesChanged() {
    mLogger.debug("Property change notification received");
}

/**
 * Hada Sogeti Test Collection Data Collector
 * 
 * @param collectionFreqInMs the collection frequency for this collector, in ms.
 */
@Override
public void normalCollection(long collectionFreqInMs) {

    mLogger.log("Metrics collection started");
	 String url = mProperties.getUrl();
	    String username = mProperties.getUsername();
	    String password = mProperties.getPassword();
	    String truststoreLoc = mProperties.getTruststorFile();
	    String truststorePass = mProperties.getTruststorePassword();
	    String appl = mProperties.getAppl();
	    String freq = mProperties.getCollectionIntervalInMillis();
	    long actualCollectionFreq = 900000; // 15 minutes
		try {
			actualCollectionFreq = Long.parseLong(freq);
		} catch (NumberFormatException e) {
			mLogger.log("CronTabCollectionFreq not given or not a number. Default will be used = " + actualCollectionFreq);
		}
	    
	    try {
	    	SogetiAgentProtData mRootTopology = new SogetiAgentProtData(appl);
	    	
	    	hadaScenarioData sce = new hadaScenarioData("Scenario1");
	    	sce.setDescription("Description1");
	    	sce.setShortname("Scenario111");
	    	sce.setStatus("Processing");
	    	sce.setVersion("1");
	    	mRootTopology.getScenarios().add(sce);
	    	
	    	hadaLocationData loc = new hadaLocationData("Location1");
	    	loc.setShortname(locations.getName("Location1"));
	    	sce.getLocations().add(loc);
	    	
	    	hadaStepData ste = new hadaStepData("Step1");
	    	ste.setShortname(steps.getName("Step1"));
	    	loc.getSteps().add(ste);
	    	
	    	hadaMeasureData mea = new hadaMeasureData("Measure1");
	    	mea.setShortname(measures.getName("Measure1"));
	    	mea.setValue(123.0);
	        ste.getMeasures().add(mea);
	        
	        DataController cont = DataController.getInstance();
	        List<hadaScenarioData> sces = cont.getData(url, username, password, truststoreLoc, truststorePass, mLogger);
	    	mRootTopology.getScenarios().addAll(sces);
	    	
	        try {
	            mRootTopology.submit(mSubmitter, mUnitsService, actualCollectionFreq, System.currentTimeMillis());
	        } catch (TopologyException e) {
	            mLogger.log("cannotSubmitData", e);
	        }
	    } catch (Exception e) {
	        mLogger.log("Exception", e);
	    }
    mLogger.log("Metrics collection processed");
}


}