# Copyright 2013 Dell Inc.
# ALL RIGHTS RESERVED.
# 
# This software is the confidential and proprietary information of
# Dell Inc. ("Confidential Information").  You shall not
# disclose such Confidential Information and shall use it only in
# accordance with the terms of the license agreement you entered
# into with Dell Inc.
# 
# DELL INC. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT
# THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
# NON-INFRINGEMENT. DELL SHALL NOT BE LIABLE FOR ANY
# DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
# OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.


#
# Configuration file for com.quest.common.test.findbugs.TestForbiddenReferences
#
# This file is broken up into two sections, forbidden field references, such as
# "out" in the java.lang.System class, and forbidden methods.
#
# In the classlists here, any class that is not explicitly excluded in
# included by default.
#

#
# Map of forbidden field references to ClassLists.
#
# The format of each entry is:
#
#    "full.class.name!classMemberFieldName"
#
# This will disallow access to classMemberFieldName in full.class.name and
# all subclasses. This check will be performed for all classes in the associated
# classlist.

ForbiddenFields = {
	# These members are all forbidden because they print to the screen
	# directly, avoiding our logging system.  Use CAT.error and pass the
	# exception in to see the stack trace.
	"java.io.FileDescriptor!err" : ClassList (),
	"java.io.FileDescriptor!out" : ClassList (),

	"java.lang.System!out" : ClassList (
		# The logging system has to use System.out to implement logging
		# to the console.
		exclude "com.quest.common.log.ConsoleLogTarget",
		# The log system's internal logger reports errors to System.out
		exclude "com.quest.common.log.InternalLog",
		# Silent installer needs to dump to System.out, not a log file
		exclude "com.quest.glue.core.config.SilentConfigurationUI",
	),

	"java.lang.System!err" : ClassList (
		# The log system's internal logger reports errors to System.err
		exclude "com.quest.common.log.InternalLog",
	),
}; # ForbiddenFields

#
# Map of forbidden reference specification to ClassLists.
#
# The format of each entry is:
#
#    "full.class.Name!classMemberMethodName!signature"
# or "full.class.Name!classMemberMethodName!"
#
# If the signature string is omitted all class members with the given name are
# selected.

ForbiddenMethods = {

	# common must not reference this member
	"java.lang.System!exit!(I)V" : ClassList (
		exclude "com.quest.glue.tools.compiler.simulator.FglAMSimulatorBuilder",
		exclude "com.quest.glue.tools.compiler.simulator.DevKitSimulatorBuilder",
	),

	"java.lang.Throwable!printStackTrace!()V" : ClassList (
		# Exception subclasses are expected to properly override this
		# method, which may involve calling up to their superclass.
		exclude "com.quest.common.config.parser.DuplicatePropertyException",
		exclude "com.quest.common.config.parser.WrappingRecognitionException",
	),

	"java.lang.Throwable!printStackTrace!(Ljava/io/PrintStream;)V" : ClassList (
		# The logging system's internal logging class needs to be able
		# print a stack trace.
		exclude "com.quest.common.log.InternalLog",
		# Exception subclasses are expected to properly override this
		# method, which may involve calling up to their superclass.
		exclude "com.quest.common.util.WrappingException",
		exclude "com.quest.common.config.parser.DuplicatePropertyException",
		exclude "com.quest.common.config.parser.WrappingRecognitionException",
	),

	# Throwable.getMessage() rarely produces a consistent and self-describing
	# string. It is certainly more robust and informative to pass throwables
	# as separate paramters to logging methods.
	# If something like Throwable.getMessage() is still required, consider
	# using String.valueOf(throwable) - this normally includes
	# Throwable.getMessage() but also provides exception class info.
	"java.lang.Throwable!getMessage!()Ljava/lang/String;" : ClassList (),

	# use String.toUpperCase(Locale) instead
	"java.lang.String!toUpperCase!()Ljava/lang/String;" : ClassList (),
	# use String.toLowerCase(Locale) instead
	"java.lang.String!toLowerCase!()Ljava/lang/String;" : ClassList (
		# Allow the Regexp class to use String.toLowerCase() since
		# its case-insensitive constructor is deprecated
		exclude "com.quest.common.util.regexp.Regexp",
	),
	
	#
	# The use of QuestHome is not allowed. You must use the GlueHome subclass, which
	# understands about alternate state directories.
	#
	"com.quest.common.util.QuestHome!getHome!()Ljava/io/File;" : ClassList (
	   #Exception: GlueHome itself needs to use QuestHome
	   exclude "com.quest.glue.common.GlueHome",
	),
	"com.quest.common.util.QuestHome!getFile!()Ljava/io/File;" : ClassList (
       #Exception: GlueHome itself needs to use QuestHome
       exclude "com.quest.glue.common.GlueHome",
    ),
	"com.quest.common.util.QuestHome!getAbsoluteOrRelativeFile!()Ljava/io/File;" : ClassList (
       #Exception: GlueHome itself needs to use QuestHome
       exclude "com.quest.glue.common.GlueHome",
    ),

    # Must use the common code to create directories in the runtime classes
	# so that directory permissions are explicitly specified.
	#
	# You must use: com.quest.common.util.CommonFileUtil.mkdirsWithWarning(File, int)
	# to create directories.
	#
	"java.io.File!mkdir"  : ClassList (
	    # Common code is not held to this level of strictness
	    exclude /^com\.quest\.common\..*/,
	),
	"java.io.File!mkdirs"  : ClassList (
	    # Common code is not held to this level of strictness
	    exclude /^com\.quest\.common\..*/,
	),
	"com.quest.common.util.CommonFileUtil!mkdirsWithWarning!(Ljava/io/File;)V" : ClassList (
	    # Common code is not held to this level of strictness
	    exclude /^com\.quest\.common\..*/,
		# nor are the agent generator tools
		exclude /^com\.quest\.glue\.tools\..*/,
		# And does a permission copy as a separate step
		exclude "com.quest.glue.common.util.FileUtils",
	),

    # Prevent calling shutdownInput(), shutdownOutput(), and close() on sockets.  This is only
    # really intended for the JFogbank code, forcing it to use its Helper class to shut down
    # the sockets.  Otherwise Fog4 agents randomly and sporadically freak out.
    #
    "java.net.Socket!shutdownInput!()V" : ClassList (
        # Only test JFogbank classes, except Helper
        exclude "com.quest.glue.core.jfogbank.Helper",
        exclude /^com\.quest\.glue\.common/,
    ),
    "java.net.Socket!shutdownOutput!()V" : ClassList (
        # Only test JFogbank classes, except Helper
        exclude "com.quest.glue.core.jfogbank.Helper",
        exclude /^com\.quest\.glue\.common/,
    ),
    "java.net.Socket!close!()V" : ClassList (
        # Only test JFogbank classes, except Helper
        exclude "com.quest.glue.core.jfogbank.Helper",
        exclude /^com\.quest\.glue\.common/,
    ),

}; # ForbiddenMethods

#
# Map of forbidden method invocation links to MethodLists of exemptions.
#
# The format of each entry is:
# MethodList(
#       include "pkg.Class.forbiddenMethod(signature)",
#       ) : MethodList (
#       # exemption list
#       include "pkg1.Class1.exemptedMethod(signature)",
#       include "pkg1.Class2",
#   ),
#
ForbiddenMethodLinks = {
    #==
    #Prevent the use of the calling thread's thread group
    #
    MethodList (
        include "java.lang.ThreadGroup.<init>(Ljava/lang/String;)V",
    ) : MethodList (
        # Only PoolThreadFactory which will have its own restrictions
        include "com.quest.glue.common.util.PoolThreadFactory",
        # Specifically uses the thread group of the agent instance
        include "com.quest.glue.core.services.threads.DefaultThreadGroupManager",
        # Subclass of TimerTask, will have its own thread of execution
        include "com.quest.glue.core.jcollector.ScriptContext",
    ),

    MethodList (
        include "java.lang.Thread.<init>()V",
    ) : MethodList (
        # Subclass of TimerTask, will have its own thread of execution
        include "com.quest.glue.core.jcollector.ScriptContext",
    ),
    MethodList (
        include "java.lang.Thread.<init>(Ljava/lang/Runnable;)V",
    ) : MethodList (
        # Subclass of TimerTask, will have its own thread of execution
        include "com.quest.glue.core.jcollector.ScriptContext",
    ),
    MethodList (
        include "java.lang.Thread.<init>(Ljava/lang/Runnable;Ljava/lang/String;)V",
    ) : MethodList (
        # Subclass of TimerTask, will have its own thread of execution
        include "com.quest.glue.core.jcollector.ScriptContext",
    ),
    MethodList (
        include "java.lang.Thread.<init>(Ljava/lang/String;)V",
    ) : MethodList (
        # Subclass of TimerTask, will have its own thread of execution
        include "com.quest.glue.core.jcollector.ScriptContext",
    ),

    MethodList (
        include "com.quest.glue.common.util.PoolThreadFactory.<init>(Ljava/lang/String;)V",
    ) : MethodList (
       include "com.quest.glue.common.util.PoolThreadFactory",
    ),
    MethodList (
        include "com.quest.glue.common.util.PoolThreadFactory.<init>(Ljava/lang/String;I)V",
    ) : MethodList (
        include "com.quest.glue.common.util.PoolThreadFactory",
    ),
    #==

}; #ForbiddenMethodLinks
