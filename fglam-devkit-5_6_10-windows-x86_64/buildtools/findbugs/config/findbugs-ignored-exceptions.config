# Copyright 2013 Dell Inc.
# ALL RIGHTS RESERVED.
# 
# This software is the confidential and proprietary information of
# Dell Inc. ("Confidential Information").  You shall not
# disclose such Confidential Information and shall use it only in
# accordance with the terms of the license agreement you entered
# into with Dell Inc.
# 
# DELL INC. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT
# THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
# NON-INFRINGEMENT. DELL SHALL NOT BE LIABLE FOR ANY
# DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
# OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.


#
# Configuration file for com.quest.common.test.findbugs.FindIgnoredExceptions
#
# This test check for exceptions that are ignored, but should not me.
#

#
# List of methods that are considered to log exceptions. A logged 
# exception is a handled exception, as my grandmother always used 
# to say.
# 

ExceptionLoggingMethods = MethodList (
    include "com.quest.common.log.LogCategory",
	include "com.quest.common.log.InternalLog",
	include /com\.quest\.common\.log\.LogTarget\.internalLog/,
    include "com.quest.common.util.Debug$Init.addLogMessage",
    include "com.quest.glue.api.services.LogService$Logger",

    # Assume that if a method is called handleException(..., Exception ex)
	# (or something to that effect) it handles exceptions properly, so we
	# treat such methods as exception logging methods.
	include /^com\.quest\..+\.handle[^.]*(Exception|Throwable)\(.*(Ljava\/lang\/Exception;|Ljava\/lang\/Throwable;).*\)V$/,

	# ------------- end of common code exceptions -------------------
);

#
# Propagates exception into the return value of the called method
#
ReturnValuePropagatingMethods = MethodList (
    include "java.lang.reflect.InvocationTargetException.getTargetException",

	# ------------- end of common code exceptions -------------------
);


# Propagates the exception into the object the method is called on
#
ObjectPropagatingMethods = MethodList (
    # the initCause() method that takes a throwable or exception
    include /initCause\(.*(Ljava\/lang\/Exception;|Ljava\/lang\/Throwable;).*\)Ljava\/lang\/Throwable;$/

	# ------------- end of common code exceptions -------------------
);

