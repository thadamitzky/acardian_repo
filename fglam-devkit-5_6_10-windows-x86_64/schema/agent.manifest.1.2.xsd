<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2013 Dell Inc.
  ALL RIGHTS RESERVED.
  
  This software is the confidential and proprietary information of
  Dell Inc. ("Confidential Information").  You shall not
  disclose such Confidential Information and shall use it only in
  accordance with the terms of the license agreement you entered
  into with Dell Inc.
  
  DELL INC. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT
  THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
  NON-INFRINGEMENT. DELL SHALL NOT BE LIABLE FOR ANY
  DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
  OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		targetNamespace="urn:X-quest.com:glue/agent/manifest/1.2"
        xmlns:manifest="urn:X-quest.com:glue/agent/manifest/1.2"
        xmlns="urn:X-quest.com:glue/agent/manifest/1.2"
		xmlns:common="urn:X-quest.com:glue/common/1.2"
		elementFormDefault="qualified">

	<!-- Load in the common schema elements -->
	<xsd:import namespace="urn:X-quest.com:glue/common/1.2" schemaLocation="common.1.2.xsd"/>

	<xsd:element name="agent-manifest">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="version" type="HostVersion" >
					<xsd:annotation>
						<xsd:documentation>
							Host version compatible with this agent package.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="jvm-config" type="JvmConfig" minOccurs="0" maxOccurs="1"/>
				<xsd:element name="agents" type="Agents" >
					<xsd:annotation>
						<xsd:documentation>
							List of agents in this agent package.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
			<xsd:attributeGroup ref="common:AgentRootNodeAttrs"/>
            <xsd:attribute name="build-id" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>The build id set for the agents in this package</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="HostVersion">
		<xsd:sequence minOccurs="0">
			<xsd:element name="exclude" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						List any releases that this agent should NOT be deployed on to
					</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:attribute name="version" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:documentation>
								Host version number to exclude deployment on
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="min" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					This is the version that the agent will be targeted to.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="JvmConfig">
		<xsd:annotation>
			<xsd:documentation>
				Out-of-Process agent definitions can declare a set of JVM parameters that will be
				added to the startup of the Out-of-Process instance.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="1" maxOccurs="unbounded">
			<xsd:element name="jvmarg">
				<xsd:annotation>
					<xsd:documentation>
						Define JVM arguments to pass to the VM upon initialization. For example
						you may set the max vm heap size with -Xmx256m
					</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:attribute name="value" type="xsd:string" use="required"/>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="remote-managed" type="xsd:boolean" use="optional" default="true">
			<xsd:annotation>
				<xsd:documentation>
					Set to true (default) to enable remote management of the Out of Process VM via
					JConsole
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ipv6" type="xsd:boolean" use="optional" default="true">
			<xsd:annotation>
				<xsd:documentation>
					Set to true (default) if the Out of Process vm instance can support IPv6
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="Agents">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="agent" type="FglAMAgent" maxOccurs="unbounded"/>
            <xsd:element name="fogbank-agent" type="JFogbankAgent" maxOccurs="unbounded"/>
			<xsd:element name="simulator-agent" type="SimulatorAgent" maxOccurs="unbounded"/>
            <xsd:element name="collector-agent" type="JCollectorAgent" maxOccurs="unbounded"/>
        </xsd:choice>
	</xsd:complexType>

	<xsd:complexType name="Agent" abstract="true">
		<xsd:attribute name="name" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the agent</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="FglAMAgent">
		<xsd:complexContent>
			<xsd:extension base="Agent">
				<xsd:attribute name="class" type="common:JavaIdentifier" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Agent class that contains the implementation of the
							Foglight Agent Manager Agent interface
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="SimulatorAgent">
		<xsd:complexContent>
			<xsd:extension base="Agent">
				<xsd:attribute name="package" type="common:JavaIdentifier" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The AgentPackage that this instance will simulate
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="type" type="common:JavaIdentifier" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The AgentType that this instance will simulate
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

    <xsd:complexType name="JCollectorAgent">
        <xsd:complexContent>
            <xsd:extension base="Agent"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="JFogbankAgent">
        <xsd:complexContent>
			<xsd:extension base="Agent">
                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="schedule" type="SPIDSchedule" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="schema" type="FDKSchema" minOccurs="0" maxOccurs="1"/>
                    <xsd:element name="units" type="UnitConversion" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:choice>

                <xsd:attribute name="executable" use="required">
					<xsd:annotation>
						<xsd:documentation>Path to the agent executable</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="elevatePermissions" type="xsd:boolean" use="optional" default="false">
					<xsd:annotation>
						<xsd:documentation>
							Set to true to increase the permissions available to this agent.  Usually used
							for agents that require root access to system resources for monitoring.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

    <xsd:complexType name="FDKSchema">
        <xsd:annotation>
            <xsd:documentation>
                FDK agents are legacy agents ported from Fog4.  They write their data sort-of
                directly to a 'database' (which we emulate with JFogbank) and therefore break if the
                underlying database schema changes.

                To work around this, they expect to have the current database schema sent to them so
                that they can validate this against their expected schema.  If it differs the agent
                will break rather than corrupting the database.

                Fog5 can process data dynamically, but these agents still require a schema to be
                sent to them.
            </xsd:documentation>
        </xsd:annotation>

        <xsd:sequence minOccurs="1" maxOccurs="unbounded">
            <xsd:element name="table" type="FDKTable"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="FDKTable">
        <xsd:sequence minOccurs="1" maxOccurs="unbounded">
            <xsd:element name="field">
                <xsd:complexType>
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                    <xsd:attribute name="type" use="required">
                        <xsd:simpleType>
                            <xsd:annotation>
                                <xsd:documentation>
                                    These are the exact string types required by the FDK
                                    agents.  Note that they aren't the same as the ones
                                    used by spid.
                                </xsd:documentation>
                            </xsd:annotation>
                            <xsd:restriction base="xsd:string">
                                <xsd:enumeration value="string"/>
                                <xsd:enumeration value="float"/>
                                <xsd:enumeration value="unsigned int"/>
                                <xsd:enumeration value="int"/>
                            </xsd:restriction>
                        </xsd:simpleType>
                    </xsd:attribute>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>

        <xsd:attribute name="name" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The name of the table</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="SPIDSchedule">
        <xsd:annotation>
            <xsd:documentation>
                SPID uses scheduler properties in its procedure definitions to determine which
                agent property should be used to determine sample frequencies.  Most normal agents
                will use whatever proeprty they like directly, but ported JFogbank agents need to
                continue using the configured scheduler.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="tableName" type="xsd:string" use="required"/>
        <xsd:attribute name="scheduleQuery" type="xsd:string" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="UnitConversion">
        <xsd:annotation>
            <xsd:documentation>
                Specifies how the strings read from the data sent by Fog4 agents should be converted
                before being sent along to the server.  This includes what units to associate with
                each field, as well as whether it should be interpreted as a string or numeric data.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="field" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="name" type="xsd:string" use="required"/>
                    <xsd:attribute name="type" type="ConversionType" use="required"/>
                    <xsd:attribute name="units" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="tableName" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:simpleType name="ConversionType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="string"/>
            <xsd:enumeration value="double"/>
            <xsd:enumeration value="int"/>
            <xsd:enumeration value="long"/>
        </xsd:restriction>
    </xsd:simpleType>

</xsd:schema>
